	<architecture>
	
	<!-- jluu and ken: ODIN II specific config -->
	<models>
		<model name="multiply">
		  <input_ports>
			<port name="a"/>
			<port name="b"/>
		  </input_ports>
		  <output_ports> 
			<port name="out"/> 
		  </output_ports> 
		</model>

		<model name="single_port_memory">
		  <input_ports>
			<port name="c"/>     <!-- control -->
			<port name="addr"/>  <!-- address lines -->
			<port name="data"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
		  </input_ports>
		  <output_ports> 
			<port name="out"/>   <!-- output can be broken down into smaller bit widths minimum size 1 -->
		  </output_ports> 
		</model>

		<model name="dual_port_memory">
		  <input_ports>
			<port name="c"/>     <!-- control -->
			<port name="addr1"/>  <!-- address lines -->
			<port name="addr2"/>  <!-- address lines -->
			<port name="data"/>  <!-- data lines can be broken down into smaller bit widths minimum size 1 -->
		  </input_ports>
		  <output_ports> 
			<port name="out"/>   <!-- output can be broken down into smaller bit widths minimum size 1 -->
		  </output_ports> 
		</model>
	</models>
	<!-- jluu and ken: ODIN II specific config ends -->

	<!-- jluu and ken: Physical descriptions begin -->
	<layout auto="1.0"/>
		<device>
			<sizing R_minW_nmos="5726.870117" R_minW_pmos="15491.700195" ipin_mux_trans_size="1.000000"/>
			<timing C_ipin_cblock="1.191000e-14" T_ipin_cblock="1.482000e-10"/>
			<area grid_logic_tile_area="30000.000000"/>
			<chan_width_distr>
				<io width="1.000000"/>
				<x distr="uniform" peak="1.000000"/>
				<y distr="uniform" peak="1.000000"/>
			</chan_width_distr>
			<switch_block type="wilton" fs="3"/>
		</device>
		<switchlist>
			<switch type="mux" name="0" R="94.841003" Cin="1.537000e-14" Cout="2.194000e-13" Tdel="6.562000e-11" mux_trans_size="10.000000" buf_size="1"/>
		</switchlist>
		<segmentlist>
			<segment freq="1.000000" length="3" type="unidir" Rmetal="11.064550" Cmetal="4.727860e-14">
				<mux name="0"/>
				<sb type="pattern">1 1 1 1</sb>
				<cb type="pattern">1 1 1</cb>
			</segment>
			<segment freq="1.000000" length="2" type="unidir" Rmetal="11.064550" Cmetal="4.727860e-14">
				<mux name="0"/>
				<sb type="pattern">1 1 1</sb>
				<cb type="pattern">1 1</cb>
			</segment>
		</segmentlist>
		<typelist>
			<io capacity="3" t_inpad="7.734000e-11" t_outpad="4.395000e-11">
				<fc_in type="frac">0.250000</fc_in>
				<fc_out type="frac">1.000000</fc_out>
			</io>
			<type name=".clb" max_subblock_units="10">
				
				<!-- jluu New proposal method (BEGIN) -->
				<!-- Special logic block, can implement two 5 LUTs, one six LUT, has register bypass available -->
				<subblocks name="VLUT" subblock_units_consumed="1" max_subblock_inputs="6" max_subblock_outputs="2" max_primitive_units="2">
					<!-- Register timing information and # of registers available -->
					<registers tco="1.261e-10" tsu="3.99e-11" num_reg_at_inputs="0" num_reg_at_outputs="1"/>
			
					<!-- A primitive is the smallest indivisible component, its inputs and outputs registers can be one of three values: false|optional|mandatory 
					model - the logic function it implements
					name - an identifier so that timing tools know which physical primitive to use
					-->
					<primitive name="5LUT" model="logic" num_inputs="5" num_outputs="1" primitive_units_consumed="1" input_reg="false" output_reg="optional" max_instances="2">
						<timing_matrix>
							<trow>1.679000e-10</trow>
							<trow>1.715000e-10</trow>
							<trow>1.826000e-10</trow>
							<trow>1.937000e-10</trow>
							<trow>2.048000e-10</trow>
						</timing_matrix>
					</primitive>

					<primitive name="6LUT" model="logic" num_inputs="6" num_outputs="1" primitive_units_consumed="1" input_reg="false" output_reg="optional" max_instances="1">
						<timing_matrix>
							<trow>1.679000e-10</trow>
							<trow>1.715000e-10</trow>
							<trow>1.826000e-10</trow>
							<trow>1.937000e-10</trow>
							<trow>2.048000e-10</trow>
							<trow>2.156000e-10</trow>
						</timing_matrix>
					</primitive>

					<primitive name="bypass" model="wire" num_inputs="1" num_outputs="1" primitive_units_consumed="1" input_reg="false" output_reg="mandatory" max_instances="1">
						<timing_matrix>
							<trow>0</trow>
						</timing_matrix>
					</primitive>

				</subblocks>
				<!-- jluu New proposal method (END) -->

				<fc_in type="frac">0.250000</fc_in>
				<fc_out type="frac">1.000000</fc_out>
				<pinclasses>
					<class type="in">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 </class>
					<class type="out">22 23 24 25 26 27 28 29 30 31 </class>
					<class type="global">32 </class>
				</pinclasses>
				<pinlocations>
					<loc side="left">1 5 9 13 17 21 23 27 31 </loc>
					<loc side="right">3 7 11 15 19 25 29 </loc>
					<loc side="top">2 6 10 14 18 24 28 32 </loc>
					<loc side="bottom">0 4 8 12 16 20 22 26 30 </loc>
				</pinlocations>
				<gridlocations>
					<loc type="fill" priority="1"/>
				</gridlocations>
				<timing>
					<tedge type="T_sblk_opin_to_sblk_ipin">1.042000e-10</tedge>
					<tedge type="T_fb_ipin_to_sblk_ipin">9.955000e-11</tedge>
					<tedge type="T_sblk_opin_to_fb_opin">0.000000e+00</tedge>
				</timing>
			</type>

			<type name=".memory" max_subblock_units="1">
				<!-- jluu New proposal method part 2 (BEGIN) -->
				<!-- Memory block with varying size and port abilities -->

				<!-- single port memory with regsitered inputs only -->
				<subblocks name="16x4_sp_memory" subblock_units_consumed="1" max_subblock_inputs="9" max_subblock_outputs="4" max_primitive_units="4">

					<!-- Register timing information and # of registers available -->
					<registers tco="1.261e-10" tsu="3.99e-11" num_reg_at_inputs="9" num_reg_at_outputs="0"/>
			
					<primitive name="16x4_sp_memory" model="single_port_memory" num_inputs="9" num_outputs="1" primitive_units_consumed="1" input_reg="mandatory" output_reg="false" max_instances="4">
						<timing_matrix delay_type="constant" delay="2e-10" />
						<!-- Define pin classes for primitives, primitives must match pin class rules for it to pack into subblock -->
						<pinclasses> 
							<!--   Assumption: Upstream tools declare a blackbox model with a different letter denoting a different logical class of pins
								               For example, addition is A + B = C so the tool will declare a model with inputs a1, a2, ... aN, b1, b2, ... bN 
											   and outputs c1, c2, ... cN
								   port_name - Each pin declared by upstream tools have a prefix followed by a number and this prefix indicates the class for the pin
								   num_pins - Maximum pins of this prefix available in this primitive
							       min_shared_pins - Each primitive being packed must share a minimum number of pins for the specified pin list
								   equivalence - Order of pin does not matter (eg. pin 3 can match pin 1)
								   open_pins - Pins connecting to an open net is to be considered either a "unique" net or be considered a "wildcard" (ie. open net matches any net)
								   subblock_pin_start - beginning of corresponding locations of subblock pins (starting count at 0), note that whether I start at pin 0 for the outputs or pin 0 for the inputs depends on the port
								   remove_duplicated_nets - whether or not a common net on two different pins can be removed.
							-->
							
							<!-- represents control signal such as CE -->
							<class port_name="c" num_pins="1" min_shared_pins="1" equivalence="false" open_pins_unique="true" subblock_pin_start="0" remove_duplicated_nets="false"/> 

							<!-- represents address lines -->
							<class port_name="addr" num_pins="4" min_shared_pins="4" equivalence="true" open_pins_unique="true" subblock_pin_start="1" remove_duplicated_nets="false"/>

							<!-- represents data input lines -->
							<class port_name="data" num_pins="1" min_shared_pins="0" subblock_pin_start="5" remove_duplicated_nets="false"/>

							<!-- represents data output lines -->
							<class port_name="out" num_pins="1" min_shared_pins="0" subblock_pin_start="0" remove_duplicated_nets="false"/>
						</pinclasses>
					</primitive>

				</subblocks>

				<!-- single port memory with regsitered inputs only -->
				<subblocks name="64x2_sp_memory" subblock_units_consumed="1" max_subblock_inputs="9" max_subblock_outputs="2" max_primitive_units="2">

					<registers tco="1.261e-10" tsu="3.99e-11" num_reg_at_inputs="9" num_reg_at_outputs="0"/>
			
					<primitive name="64x2_sp_memory" model="single_port_memory" num_inputs="9" num_outputs="1" primitive_units_consumed="1" input_reg="mandatory" output_reg="false" max_instances="2">
						<timing_matrix delay_type="constant" delay="2e-10" />
						<pinclasses> 
							<class port_name="c" num_pins="1" min_shared_pins="1" equivalence="false" open_pins_unique="true" subblock_pin_start="0" remove_duplicated_nets="false"/> 
							<class port_name="addr" num_pins="6" min_shared_pins="6" equivalence="true" open_pins_unique="true" subblock_pin_start="1" remove_duplicated_nets="false"/>
							<class port_name="data" num_pins="1" min_shared_pins="0" subblock_pin_start="7" remove_duplicated_nets="false"/>
							<class port_name="out" num_pins="1" min_shared_pins="0" subblock_pin_start="0" remove_duplicated_nets="false"/>
						</pinclasses>
					</primitive>

				</subblocks>

				<!-- dual port memory with regsitered inputs and outputs -->
				<subblocks name="8x2_dp_memory_reg_out" subblock_units_consumed="1" max_subblock_inputs="9" max_subblock_outputs="2" max_primitive_units="2">

					<registers tco="1.261e-10" tsu="3.99e-11" num_reg_at_inputs="9" num_reg_at_outputs="2"/>
			
					<primitive name="8x2_dp_memory_reg_out" model="dual_port_memory" num_inputs="9" num_outputs="1" primitive_units_consumed="1" input_reg="mandatory" output_reg="mandatory" max_instances="2">
						<timing_matrix delay_type="constant" delay="2e-10" />
						<pinclasses> 
							<class port_name="c" num_pins="1" min_shared_pins="1" equivalence="false" open_pins_unique="true" subblock_pin_start="0" remove_duplicated_nets="false"/> 
							<class port_name="addr1" num_pins="3" min_shared_pins="3" equivalence="false" open_pins_unique="true" subblock_pin_start="1" remove_duplicated_nets="false"/>
							<class port_name="addr2" num_pins="3" min_shared_pins="3" equivalence="false" open_pins_unique="true" subblock_pin_start="4" remove_duplicated_nets="false"/>
							<class port_name="data" num_pins="1" min_shared_pins="0" subblock_pin_start="7" remove_duplicated_nets="false"/>
							<class port_name="out" num_pins="1" min_shared_pins="0" subblock_pin_start="0" remove_duplicated_nets="false"/>
						</pinclasses>
					</primitive>

				</subblocks>

				<!-- jluu New proposal method part 2 (END) -->
				<fc_in type="frac">0.250000</fc_in>
				<fc_out type="frac">1.000000</fc_out>
				<pinclasses>
					<class type="in">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 </class>
					<class type="out">22 23 24 25 26 27 28 29 30 31 </class>
					<class type="global">32 </class>
				</pinclasses>
				<pinlocations>
					<loc side="left">1 5 9 13 17 21 23 27 31 </loc>
					<loc side="right">3 7 11 15 19 25 29 </loc>
					<loc side="top">2 6 10 14 18 24 28 32 </loc>
					<loc side="bottom">0 4 8 12 16 20 22 26 30 </loc>
				</pinlocations>
				<gridlocations>
					<loc type="fill" priority="1"/>
				</gridlocations>
				<timing>
					<tedge type="T_sblk_opin_to_sblk_ipin">1.042000e-10</tedge>
					<tedge type="T_fb_ipin_to_sblk_ipin">9.955000e-11</tedge>
					<tedge type="T_sblk_opin_to_fb_opin">0.000000e+00</tedge>
				</timing>
			</type>

		<!-- This is the 36*36 uniform mult -->
		<type name=".mult_36" height="3" max_subblock_units="1">
			<subblocks name="mult_36" subblock_units_consumed="1" max_subblock_inputs="36" max_subblock_outputs="36" max_primitive_units="2">

				<!-- jluu New proposal method part 3 (END) -->
				<registers tco="1.261e-10" tsu="3.99e-11" num_reg_at_inputs="36" num_reg_at_outputs="36"/>

				<primitive name="18x18mult" model="multiply" num_inputs="36" num_outputs="36" primitive_units_consumed="2" input_reg="optional" output_reg="optional" max_instances="1">
					<timing_matrix delay_type="constant" delay="2e-10" />
					<pinclasses> 
						<class port_name="a" num_pins="18" min_shared_pins="0" equivalence="false" open_pins_unique="false" subblock_pin_start="0" remove_duplicated_nets="false"/>
						<class port_name="b" num_pins="18" min_shared_pins="0" equivalence="false" open_pins_unique="false" subblock_pin_start="36" remove_duplicated_nets="false"/>
						<class port_name="out" num_pins="36" min_shared_pins="0" equivalence="false" open_pins_unique="false" subblock_pin_start="0" remove_duplicated_nets="false"/>
					</pinclasses>
				</primitive>

				<!-- Note that by starting my subblock input pin count at 36 for data bus input b, I can control where the routing goes to the CLB -->
				<primitive name="9x9mult" model="multiply" num_inputs="18" num_outputs="18" primitive_units_consumed="1" input_reg="optional" output_reg="optional" max_instances="2">
					<timing_matrix delay_type="constant" delay="2e-10" />
					<pinclasses> 
						<class port_name="a" num_pins="18" min_shared_pins="0" equivalence="false" open_pins_unique="false" subblock_pin_start="0" remove_duplicated_nets="false"/>
						<class port_name="b" num_pins="18" min_shared_pins="0" equivalence="false" open_pins_unique="false" subblock_pin_start="36" remove_duplicated_nets="false"/>
						<class port_name="out" num_pins="36" min_shared_pins="0" equivalence="false" open_pins_unique="false" subblock_pin_start="0" remove_duplicated_nets="false"/>
					</pinclasses>
				</primitive>
				<!-- jluu New proposal method part 3 (END) -->

			</subblocks>

			<fc_in type="frac">0.25</fc_in>
			<fc_out type="full" />
			<pinclasses>
				<class type="in">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35</class>
				<class type="out">36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71</class>
				<class type="global">72</class>
			</pinclasses>

			<pinlocations>
				<loc side="left">0 8 16 24 32 40 48 56 64 65</loc>
				<loc side="left" offset="1">1 9 17 25 33 41 49 57 66</loc>
				<loc side="left" offset="2">2 10 18 26 34 42 50 58 67</loc>
				<loc side="top" offset="2">3 11 19 27 35 43 51 59 68</loc>
				<loc side="right">4 12 20 28 36 44 52 60 69</loc>
				<loc side="right" offset="1">5 13 21 29 37 45 53 61 70</loc>
				<loc side="right" offset="2">6 14 22 30 38 46 54 62 71</loc>
				<loc side="bottom">7 15 23 31 39 47 55 63 72</loc>
			</pinlocations>

			<gridlocations>
				<loc type="col" start="2" repeat="5" priority="2"/>
				<loc type="rel" pos="0.5"  priority="3"/>
			</gridlocations>

			<timing>
				<tedge type="T_sblk_opin_to_sblk_ipin">2e-9</tedge>
				<tedge type="T_fb_ipin_to_sblk_ipin">3e-9</tedge>
				<tedge type="T_sblk_opin_to_fb_opin">4e-9</tedge>
			</timing>
		</type>
		</typelist>
	</architecture>
